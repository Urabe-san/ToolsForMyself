/*
go build -a -ldflags="-s -w" -trimpath -o OnePing.exe
*/

/*
These source codes generated by the AI ​​barely worked.
Some methods were correct, but the details were not taken into account, so I fixed those.
Generated code by the AI, ​​remain in the variable names and result display parts.
That said, there are many hints in the source code generated by the AI. Keywords used in Internet searches were a great help to me when coding from a place of no prior knowledge.
*/

package main

import (
	"fmt"
	"os"
	"time"

	"github.com/go-ping/ping"
)

func main() {
	if len(os.Args) < 2 {
		return
	}

	pinger, err := ping.NewPinger(os.Args[1])
	if err != nil {
		panic(err)
	}
	pinger.SetPrivileged(true) // measures for Windows. read to "Supported Operating Systems" on https://github.com/go-ping/ping
	pinger.Count = 1
	pinger.Timeout = time.Second

	pinger.OnRecv = func(pkt *ping.Packet) {
		fmt.Printf("%d bytes from %s: icmp_seq=%d ttl=%d time=%v\n",
			pkt.Nbytes, pkt.IPAddr, pkt.Seq, pkt.Ttl, pkt.Rtt)
	}

	err = pinger.Run() // blocks until finished
	if err != nil {
		panic(err)
	}
	stats := pinger.Statistics()
	fmt.Printf("\n--- %s ping statistics ---\n", pinger.Addr())
	fmt.Printf("%d packets transmitted, %d received, %v%% packet loss\n",
		stats.PacketsSent, stats.PacketsRecv, stats.PacketLoss)
	fmt.Printf("round-trip min/avg/max/stddev = %v/%v/%v/%v\n",
		stats.MinRtt, stats.AvgRtt, stats.MaxRtt, stats.StdDevRtt)
}
